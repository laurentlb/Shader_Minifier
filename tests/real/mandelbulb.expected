// Generated with  (https://github.com/laurentlb/Shader_Minifier/)
#ifndef MANDELBULB_EXPECTED_
# define MANDELBULB_EXPECTED_

const char *mandelbulb_frag =
 "uniform vec2 resolution;"
 "uniform float time;"
 "bool f(vec4 v,vec3 f,vec3 o,out vec2 i)"
 "{"
   "vec3 y=f-v.xyz;"
   "float c=dot(y,o),x=c*c-dot(y,y)+v.w*v.w;"
   "if(x<0.)"
     "return false;"
   "float e=sqrt(x);"
   "i.x=-c-e;"
   "i.y=-c+e;"
   "return true;"
 "}"
 "bool f(vec3 v,out float f,out vec4 o)"
 "{"
   "vec4 i=vec4(100);"
   "vec3 y=v;"
   "float x=dot(y,y);"
   "if(x>1e2)"
     "return f=.5*log(x)/pow(8.,0.),o=vec4(1),false;"
   "for(int c=1;c<7;c++)"
     "{"
       "\n#if 0\n"
       "float z=sqrt(dot(y,y)),s=acos(y.y/z),p=atan(y.x,y.z);"
       "z=pow(z,8.);"
       "s*=8.;"
       "p*=8.;"
       "y=v+z*vec3(sin(s)*sin(p),cos(s),sin(s)*cos(p));"
       "\n#else\n"
       "float t=y.x,d=t*t,n=d*d,m=y.y,e=m*m,a=y.z,w=a*a,l=w*w,g=d+w,r=inversesqrt(g*g*g*g*g*g*g),C=n+e*e+l-6.*e*w-6.*d*e+2.*w*d,F=d-e+w;"
       "y.x=v.x+64.*t*m*a*(d-w)*F*(n-6.*d*w+l)*C*r;"
       "y.y=v.y+-16.*e*g*F*F+C*C;"
       "y.z=v.z+-8.*m*F*(n*n-28.*n*d*w+70.*n*l-28.*d*w*l+l*l)*C*r;"
       "\n#endif\n"
       "x=dot(y,y);"
       "i=min(i,vec4(y.xyz*y.xyz,x));"
       "if(x>1e2)"
         "return o=i,f=.5*log(x)/pow(8.,float(c)),false;"
     "}"
   "o=i;"
   "f=0.;"
   "return true;"
 "}"
 "bool f(vec3 v,vec3 y,out float o,out vec3 x,out vec4 s)"
 "{"
   "vec4 i=vec4(0,0,0,1.25);"
   "vec2 e;"
   "if(!f(i,v,y,e))"
     "return false;"
   "if(e.y<.001)"
     "return false;"
   "if(e.x<.001)"
     "e.x=.001;"
   "if(e.y>1e20)"
     "e.y=1e20;"
   "float c;"
   "vec3 z;"
   "vec4 d;"
   "float t=1./sqrt(2.);"
   "for(float w=e.x;w<e.y;)"
     "{"
       "vec3 n=v+y*w;"
       "float m=clamp(.001*w*t,1e-6,.005),g=m*.1;"
       "vec4 p;"
       "float l;"
       "if(f(n,l,d))"
         "return o=w,x=normalize(z),s=d,true;"
       "float r;"
       "f(n+vec3(g,0,0),r,p);"
       "float C;"
       "f(n+vec3(0,g,0),C,p);"
       "float a;"
       "f(n+vec3(0,0,g),a,p);"
       "z=vec3(r-l,C-l,a-l);"
       "c=.5*l*g/length(z);"
       "if(c<m)"
         "return s=d,x=normalize(z),o=w,true;"
       "w+=c;"
     "}"
   "return false;"
 "}"
 "void main()"
 "{"
   "vec2 v=-1.+2.*gl_FragCoord.xy/resolution.xy,y=v*vec2(1.33,1);"
   "vec3 x=vec3(.577),o=vec3(-.707,0,.707);"
   "float s=1.4+.2*cos(6.28318*time/20.);"
   "vec3 c=vec3(s*sin(6.28318*time/20.),.3-.4*sin(6.28318*time/20.),s*cos(6.28318*time/20.)),g=normalize(vec3(0,.1,0)-c),d=normalize(cross(g,vec3(0,1,0))),e=normalize(y.x*d+y.y*normalize(cross(d,g))+1.5*g),l,i;"
   "vec4 p;"
   "float w;"
   "if(f(c,e,w,l,p))"
     "{"
       "vec3 z=c+w*e;"
       "float n=clamp(.2+.8*dot(x,l),0.,1.);"
       "n*=n;"
       "float t=clamp(.3+.7*dot(o,l),0.,1.),m=clamp(1.25*p.w-.4,0.,1.);"
       "m=m*m*.5+.5*m;"
       "float r;"
       "vec3 C;"
       "vec4 a;"
       "if(n>.001)"
         "if(f(z,x,r,C,a))"
           "n=.1;"
       "i=vec3(1);"
       "i=mix(i,vec3(.8,.6,.2),sqrt(p.x)*1.25);"
       "i=mix(i,vec3(.8,.3,.3),sqrt(p.y)*1.25);"
       "i=mix(i,vec3(.7,.4,.3),sqrt(p.z)*1.25);"
       "i*=(.5+.5*l.y)*vec3(.14,.15,.16)*.8+n*vec3(1,.85,.4)+.5*t*vec3(.08,.1,.14);"
       "i*=vec3(pow(m,.8),pow(m,1.),pow(m,1.1));"
       "i=1.5*(i*.15+.85*sqrt(i));"
     "}"
   "else"
     " i=1.3*vec3(1,.98,.9)*(.7+.3*e.y);"
   "vec2 t=v*.5+.5;"
   "i*=.7+4.8*t.x*t.y*(1.-t.x)*(1.-t.y);"
   "i=clamp(i,0.,1.);"
   "gl_FragColor=vec4(i,1);"
 "}";

#endif // MANDELBULB_EXPECTED_
