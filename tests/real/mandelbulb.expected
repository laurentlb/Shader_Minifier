// Generated with  (https://github.com/laurentlb/Shader_Minifier/)
#ifndef MANDELBULB_EXPECTED_
# define MANDELBULB_EXPECTED_

const char *mandelbulb_frag =
 "uniform vec2 resolution;"
 "uniform float time;"
 "bool f(vec4 v,vec3 f,vec3 o,out vec2 i)"
 "{"
   "vec3 y=f-v.xyz;"
   "float c=dot(y,o),e=c*c-dot(y,y)+v.w*v.w;"
   "if(e<0.)"
     "return false;"
   "e=sqrt(e);"
   "i.x=-c-e;"
   "i.y=-c+e;"
   "return true;"
 "}"
 "bool f(vec3 v,out float f,out vec4 y)"
 "{"
   "vec4 e=vec4(100);"
   "vec3 i=v;"
   "float o=dot(i,i);"
   "if(o>1e2)"
     "return f=.5*log(o)/pow(8.,0.),y=vec4(1),false;"
   "for(int x=1;x<7;x++)"
     "{"
       "\n#if 0\n"
       "float z=sqrt(dot(i,i)),c=acos(i.y/z),s=atan(i.x,i.z);"
       "z=pow(z,8.);"
       "c*=8.;"
       "s*=8.;"
       "i=v+z*vec3(sin(c)*sin(s),cos(c),sin(c)*cos(s));"
       "\n#else\n"
       "float t=i.x,d=t*t,n=d*d,a=i.y,l=a*a,m=i.z,w=m*m,g=w*w,p=d+w,r=inversesqrt(p*p*p*p*p*p*p),C=n+l*l+g-6.*l*w-6.*d*l+2.*w*d,F=d-l+w;"
       "i.x=v.x+64.*t*a*m*(d-w)*F*(n-6.*d*w+g)*C*r;"
       "i.y=v.y+-16.*l*p*F*F+C*C;"
       "i.z=v.z+-8.*a*F*(n*n-28.*n*d*w+70.*n*g-28.*d*w*g+g*g)*C*r;"
       "\n#endif\n"
       "o=dot(i,i);"
       "e=min(e,vec4(i.xyz*i.xyz,o));"
       "if(o>1e2)"
         "return y=e,f=.5*log(o)/pow(8.,float(x)),false;"
     "}"
   "y=e;"
   "f=0.;"
   "return true;"
 "}"
 "bool f(vec3 v,vec3 o,out float y,out vec3 i,out vec4 c)"
 "{"
   "vec4 e=vec4(0,0,0,1.25);"
   "vec2 s;"
   "if(!f(e,v,o,s))"
     "return false;"
   "if(s.y<.001)"
     "return false;"
   "if(s.x<.001)"
     "s.x=.001;"
   "if(s.y>1e20)"
     "s.y=1e20;"
   "float x;"
   "vec3 z;"
   "float t=1./sqrt(2.);"
   "for(float d=s.x;d<s.y;)"
     "{"
       "vec3 m=v+o*d;"
       "float n=clamp(.001*d*t,1e-6,.005),p=n*.1;"
       "vec4 r;"
       "float w;"
       "if(f(m,w,e))"
         "return y=d,i=normalize(z),c=e,true;"
       "float g;"
       "f(m+vec3(p,0,0),g,r);"
       "float C;"
       "f(m+vec3(0,p,0),C,r);"
       "float a;"
       "f(m+vec3(0,0,p),a,r);"
       "z=vec3(g-w,C-w,a-w);"
       "x=.5*w*p/length(z);"
       "if(x<n)"
         "return c=e,i=normalize(z),y=d,true;"
       "d+=x;"
     "}"
   "return false;"
 "}"
 "void main()"
 "{"
   "vec2 v=-1.+2.*gl_FragCoord.xy/resolution.xy,i=v*vec2(1.33,1);"
   "vec3 y=vec3(.577),o=vec3(-.707,0,.707);"
   "float e=1.4+.2*cos(6.28318*time/20.);"
   "vec3 c=vec3(e*sin(6.28318*time/20.),.3-.4*sin(6.28318*time/20.),e*cos(6.28318*time/20.)),s=normalize(vec3(0,.1,0)-c),d=normalize(cross(s,vec3(0,1,0)));"
   "d=normalize(i.x*d+i.y*normalize(cross(d,s))+1.5*s);"
   "vec3 z;"
   "vec4 p;"
   "if(f(c,d,e,s,p))"
     "{"
       "vec3 i=c+e*d;"
       "float v=clamp(.2+.8*dot(y,s),0.,1.);"
       "v*=v;"
       "float t=clamp(.3+.7*dot(o,s),0.,1.),w=clamp(1.25*p.w-.4,0.,1.);"
       "w=w*w*.5+.5*w;"
       "float r;"
       "vec3 C;"
       "vec4 x;"
       "if(v>.001)"
         "if(f(i,y,r,C,x))"
           "v=.1;"
       "z=mix(mix(mix(vec3(1),vec3(.8,.6,.2),sqrt(p.x)*1.25),vec3(.8,.3,.3),sqrt(p.y)*1.25),vec3(.7,.4,.3),sqrt(p.z)*1.25)*((.5+.5*s.y)*vec3(.14,.15,.16)*.8+v*vec3(1,.85,.4)+.5*t*vec3(.08,.1,.14))*vec3(pow(w,.8),w,pow(w,1.1));"
       "z=1.5*(z*.15+.85*sqrt(z));"
     "}"
   "else"
     " z=1.3*vec3(1,.98,.9)*(.7+.3*d.y);"
   "v=v*.5+.5;"
   "z=clamp(z*(.7+4.8*v.x*v.y*(1.-v.x)*(1.-v.y)),0.,1.);"
   "gl_FragColor=vec4(z,1);"
 "}";

#endif // MANDELBULB_EXPECTED_
