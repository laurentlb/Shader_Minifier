// Generated with  (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADER_MINIFIER_IMPL
#ifndef SHADER_MINIFIER_HEADER
# define SHADER_MINIFIER_HEADER
# define VAR_ambientLight "c"
# define VAR_diffuseColor "p"
# define VAR_emissiveColor "z"
# define VAR_fragmentColor "r"
# define VAR_mediumDensity "f"
# define VAR_normal "m"
# define VAR_specularColor "t"
# define VAR_texture0 "v"
# define VAR_viewVec "d"
#endif

#else // if SHADER_MINIFIER_IMPL

// tests/unit/inout.frag
 "#version 330\n"
 "uniform samplerCube v;"
 "in vec3 m,d;"
 "out vec4 r;"
 "void main()"
 "{"
   "vec3 c=normalize(d),f=normalize(m);"
   "r=vec4(mix(vec3(.1,.2,.3)*texture(v,refract(-c,f,1./1.5)).xyz,texture(v,reflect(-c,f)).xyz,.1),1);"
 "}"
 "vec3 e(vec3 v,vec3 m,vec3 f)"
 "{"
   "float r=1.-clamp(dot(m,f),0.,1.);"
   "return r*r*r*r*r*(1.-v)+v;"
 "}"
 "vec3 e(vec3 v,vec3 m,vec3 f,vec3 c,vec3 d,float r)"
 "{"
   "m=normalize(v+m);"
   "r=1.+2048.*(1.-r)*(1.-r);"
   "v=e(d,v,m);"
   "return mix(c,vec3(pow(clamp(dot(m,f),0.,1.),r)*(r+4.)/8.),v);"
 "}",

// tests/unit/inout2.frag
 "#version 330\n"
 "uniform samplerCube v;"
 "uniform float f;"
 "uniform vec3 c,p,z,t;"
 "in vec3 m,d;"
 "out vec4 r;"
 "vec3 e(vec3 v,vec3 m,vec3 f)"
 "{"
   "float r=1.-clamp(dot(m,f),0.,1.);"
   "return r*r*r*r*r*(1.-v)+v;"
 "}"
 "void main()"
 "{"
   "r=vec4(z+mix(p*c,c,.5),1);"
 "}"
 "vec3 e(vec3 v,vec3 m,vec3 f,vec3 c,vec3 d,float r)"
 "{"
   "m=normalize(v+m);"
   "r=1.+2048.*(1.-r)*(1.-r);"
   "v=e(d,v,m);"
   "return mix(c,vec3(pow(clamp(dot(m,f),0.,1.),r)*(r+4.)/8.),v);"
 "}",

#endif
