// Generated with  (https://github.com/laurentlb/Shader_Minifier/)
#ifndef OVERLOAD_EXPECTED_
# define OVERLOAD_EXPECTED_
# define VAR_ZH "t"
# define VAR__V "x"
# define VAR_a_ "i"
# define VAR_outputvar "f"
# define VAR_stopinlining "v"

const char *overload_frag =
 "#version 330\n"
 "uniform sampler2D x;"
 "uniform vec2 i;"
 "in vec2 t;"
 "out float v;"
 "out vec4 f;"
 "float h()"
 "{"
   "return v+.1;"
 "}"
 "float m()"
 "{"
   "return v+.2;"
 "}"
 "float h(int t)"
 "{"
   "return v+.3;"
 "}"
 "float m(float t)"
 "{"
   "return v+.4;"
 "}"
 "float h(bool t)"
 "{"
   "return v+.5;"
 "}"
 "float h(int t,int m)"
 "{"
   "return v+.6;"
 "}"
 "float h(int t,int m,int x,int f)"
 "{"
   "return v+.7;"
 "}"
 "float h(sampler2D t,float v)"
 "{"
   "return texelFetch(t,ivec2(255.*v)%256,0).x;"
 "}"
 "float h(sampler2D t,vec2 v)"
 "{"
   "return texelFetch(t,ivec2(255.*v)%256,0).x;"
 "}"
 "float h(sampler2D t,vec3 v)"
 "{"
   "float m=texelFetch(t,ivec2(255.*v.yz)%256,0).x;"
   "return texelFetch(t,ivec2(255.*v.x,255.*m)%256,0).x;"
 "}"
 "void main()"
 "{"
   "float v=0.,D=h(true)+h(0,1)-h(0,1,2,3),F=h(x,i*t);"
   "f=vec4(h()+2.*h(0),2.*m(1.2)-m(),D,F+v++);"
 "}";

#endif // OVERLOAD_EXPECTED_
